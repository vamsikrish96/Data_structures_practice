//Vertical Order tree traversal (Showing the vertical order in a tree using queue pair)
package ps_1;
import java.util.*;
public class Vertical_order_tree_sol {

	public static class Node
	{
		int data;
		Node left;
		Node right;
		
		Node(int x)
		{
			this.data = x;
			this.right = null;
			this.left = null;
		}
		
	}
	
	static class Pair
	{
		Node element;
		int pos;
		
		Pair(Node element,int pos)
		{
			this.element = element;
			this.pos = pos;
		}
		
		
		
	}
	static ArrayList<Integer> b = new ArrayList<Integer>();
	

	public static void main(String[] args) {
		
		 Node root = null;
		
		 int[] a = new int[]{3,5,1,2,4};
		 
		 for(int i = 0;i<5;i++)
		 {
			root = Insert(root,a[i]);
			
		 }
		 
		 
	    HashMap<Integer,ArrayList<Integer>> hm = new HashMap<Integer,ArrayList<Integer>>();
	     
	      int l=1000,r =-1000;
	      Queue<Pair> q = new LinkedList<>();
	      q.add(new Pair(root, 0));
	      while(q.peek() != null)
	      {    Pair temp_node = q.poll();
	      	 // System.out.println(temp_node.element.data);
	          l = Math.min(l,temp_node.pos);
	          r = Math.max(r,temp_node.pos);
	         
	          if((hm.containsKey(temp_node.pos)))
	          {
	              b = hm.get(temp_node.pos);
	              b.add(temp_node.element.data);
	              hm.put(temp_node.pos,b);
	          }
	          else
	          {
	        	  b = new ArrayList<Integer>();
	              b.add(temp_node.element.data);
	              hm.put(temp_node.pos, b);
	          }
	          
	          if(temp_node.element.left != null)
	          {
	              q.add(new Pair(temp_node.element.left, temp_node.pos-1));
	          
	          }

	          if(temp_node.element.right != null)
	          {
	              
	              //System.out.println(temp_node.n.data + "and level is " + temp_node.level);
	             
	              q.add(new Pair(temp_node.element.right, temp_node.pos+1));
	               
	              
	            
	          }
	         
	          System.out.println(hm);
	      }
	      
	     
	     for(int d = l;d<=r;d++)
	     {	
	    	 b = hm.get(d);
	    	 Collections.sort(b);
	    	 int t = 0;
	    	 while(t<b.size())
	    	 {	 
	    		 System.out.print(b.get(t)+" ");
	    		 
	    		 t++;
	    	 }
	    	 System.out.println();
	     }
	    

}
	
	
public static Node Insert(Node root,int val)
{
	if(root == null)
	{
		
		return (new Node(val));
	}
	
	if(val > root.data)
	{
		root.right = Insert(root.right,val);
	}
	
	else
	{
		root.left = Insert(root.left,val);
	}
	
	return root;
	
	
}
	
	
	
	
	

}
