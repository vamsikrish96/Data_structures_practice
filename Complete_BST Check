// To check whether it is complete BST
package ps_1;
import ps_1.Vertical_order_tree_sol.Node;
import java.util.*;

public class Complete_BST {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

Queue<Node> q = new LinkedList<>();
		
		int flag = 0;
		int[] a  = new int[]{5,6,7,8};
		Node root = null;
		for(int i =0;i<4;i++)
		{
			root = Insert(root,a[i]);
			
		}
		
		q.add(root);
		while(q.isEmpty() != true)
		{
			Node temp = q.poll();
	/*		if((temp.left == null) && (temp.right != null))
			{
				flag = 0;
				System.out.println("Not  complete tree");
				break;		 
			}
		*/	
		  if(flag == 0)
		   {
			
			if((temp.left != null) && (temp.right != null))
			{
				q.add(temp.left);
				q.add(temp.right);
			}
			else 
			{
				flag =1;
				if(temp.left != null)
				{
					q.add(temp.left);
				}
				if(temp.right!=null)
				{
					q.add(temp.right);
				}
			}
			
		   }
		
		  else
		  {
			if((temp.left != null) || (temp.right != null))
			{	flag = 0;
				System.out.println("Not a complete tree");
				break;
			}
			
		  }
		
		
		
		}
		if(flag != 0)
		{
			System.out.println("complete tree");
		}
	}
	
	public static Node Insert(Node root,int element)
	{
		if(root == null)
		{
			return (new Node(element));
			
		}
		
		if(element > root.data)
		{
			root.right = Insert(root.right,element);
		}
		else
		{
			root.left = Insert(root.left,element);
		}
		
		return root;
	}
	

}
